javascript:/* Randomize the first marker. */ var turn=Math.random()<1/2 ? 0 : 1; /* Set unit size. */ var unit=100/11; /* Create menu. */ var menu=document.createElement(%27div%27); menu.style.position=%27fixed%27; menu.style.top=%2750%%27; menu.style.left=%2750%%27; menu.style.height=9*unit+%27vmin%27; menu.style.width=9*unit+%27vmin%27; menu.style.transform=%27translate(-50%,-50%)%27; menu.style.zIndex=9999; menu.innerHTML=%27<a style=\%27background:white;position:absolute;left:100%;cursor:pointer\%27 onClick=\%27menu.remove()\%27>exit</a>%27; document.body.appendChild(menu); /* Create board. */ var board=document.createElement(%27div%27); board.style.background=%27rgba(255,255,255,0.9)%27; board.style.position=%27absolute%27; board.style.top=0; board.style.left=0; board.style.height=9*unit+%27vmin%27; board.style.width=9*unit+%27vmin%27; board.mark=null; menu.appendChild(board); /* Create macro and micro maps. */ BOXES=[]; boxes=[[],[],[],[],[],[],[],[],[]]; /* Fill the board. */ for(var i=0;i<3;i++){ for(var j=0;j<3;j++){ var BOX=document.createElement(%27div%27); BOX.style.position=%27absolute%27; BOX.style.top=i*100/3+%27%%27; BOX.style.left=j*100/3+%27%%27; BOX.style.height=100/3+%27%%27; BOX.style.width=100/3+%27%%27; BOX.mark=null; for(var k=0;k<3;k++){ for(var l=0;l<3;l++){ var box=document.createElement(%27div%27); box.setAttribute(%27onMouseOver%27,%27this.style.background=\%27rgba(0,0,0,0.25)\%27%27); box.setAttribute(%27onMouseOut%27,%27this.style.background=\%27transparent\%27%27); box.setAttribute(%27onClick%27,%27pick(this)%27); box.style.position=%27absolute%27; box.style.top=k*100/3+%27%%27; box.style.left=l*100/3+%27%%27; box.style.height=100/3+%27%%27; box.style.width=100/3+%27%%27; box.macro=3*i+j; box.micro=3*k+l; box.mark=null; boxes[3*i+j].push(box); if(box.macro%2==0){ box.style.boxShadow=%270 0 1vmin black inset%27; } else{ box.style.boxShadow=%270 0 1vmin gray inset%27; } BOX.appendChild(box); } } BOXES.push(BOX); board.appendChild(BOX); } } /* +---+---+---+ | 0 | 1 | 2 | +---+---+---+ | 3 | 4 | 5 | +---+---+---+ | 6 | 7 | 8 | +---+---+---+ */ /* Check for victories. */ function check(m){ var checkmark=0; if(m[0].mark!=null){ if((m[0].mark==m[1].mark && m[1].mark==m[2].mark) || (m[0].mark==m[3].mark && m[3].mark==m[6].mark)){ checkmark=1; } } if(m[4].mark!=null){ if((m[3].mark==m[4].mark && m[4].mark==m[5].mark) || (m[1].mark==m[4].mark && m[4].mark==m[7].mark) || (m[0].mark==m[4].mark && m[4].mark==m[8].mark) || (m[2].mark==m[4].mark && m[4].mark==m[6].mark)){ checkmark=1; } } if(m[8].mark!=null){ if((m[6].mark==m[7].mark && m[7].mark==m[8].mark) || (m[2].mark==m[5].mark && m[5].mark==m[8].mark)){ checkmark=1; } } if(checkmark){ marker(m[0].parentNode); } else{ if(m[0].mark!=null && m[1].mark!=null && m[2].mark!=null && m[3].mark!=null && m[4].mark!=null && m[5].mark!=null && m[6].mark!=null && m[7].mark!=null && m[8].mark!=null){ draw(m[0].parentNode); } } } /* Place a tied marker. */ function draw(obj){ /* Disable the tied box. */ obj.mark=2; disable(obj); obj.style.pointerEvents=%27none%27; } /* Place a marker. */ function marker(obj){ /* Place an O. */ if(turn==0){ var o=document.createElement(%27div%27); o.style.boxSizing=%27border-box%27; o.style.position=%27absolute%27; o.style.top=%2710%%27; o.style.left=%2710%%27; o.style.height=%2780%%27; o.style.width=%2780%%27; /* Set O border size based on nested box level, because for some reason percentage isn%27t supported. */ var inBOXES=0; for(var i=0;i<9;i++){ if(obj==BOXES[i]){ inBOXES=1; break; } } o.style.border=unit*(obj==board ? 9 : (inBOXES ? 3 : 1))/5+%27vmin solid black%27; o.style.borderRadius=%2750%%27; obj.appendChild(o); } /* Place an X. */ else{ var x1=document.createElement(%27div%27); x1.style.boxSizing=%27border-box%27; x1.style.background=%27black%27; x1.style.position=%27absolute%27; x1.style.top=%2710%%27; x1.style.left=%2740%%27; x1.style.height=%2780%%27; x1.style.width=%2720%%27; x1.style.transform=%27rotate(45deg)%27; obj.appendChild(x1); var x2=x1.cloneNode(); x2.style.transform=%27rotate(-45deg)%27; obj.appendChild(x2); } /* Mark the map and disable the marked box. */ obj.mark=turn; disable(obj); obj.style.pointerEvents=%27none%27; } /* Do stuff to a box upon click. */ function pick(b){ /* Mark box. */ marker(b); /* Check victories. */ check(boxes[b.macro]); check(BOXES); /* Pass turn to other player. */ turn>0 ? turn=0 : turn=1; /* Enable next macro box if it isn%27t won. */ if(BOXES[b.micro].mark==null){ /* Disable all boxes. */ for(i=0;i<9;i++){ for(var j=0;j<9;j++){ disable(boxes[i][j]); } } /* Enable next macro box. */ for(i=0;i<9;i++){ /* Forces won macro boxes to stay disabled. */ if(board.mark==null){ enable(boxes[b.micro][i]); } } } /* Enable all macro boxes if it%27s won. */ else{ for(i=0;i<9;i++){ for(var j=0;j<9;j++){ /* Forces won macro boxes to stay disabled. */ if(board.mark==null){ enable(boxes[i][j]); } } } } /* Forces won micro boxes to stay disabled. */ disable(b); } /* Disables a box. */ function disable(b){ b.style.background=%27rgba(0,0,0,0.25)%27; b.setAttribute(%27onMouseOver%27,%27%27); b.setAttribute(%27onMouseOut%27,%27%27); b.setAttribute(%27onClick%27,%27%27); } /* Enables a box. */ function enable(b){ /* Forces won boxes to stay disabled. */ if(b.mark==null){ b.style.background=%27transparent%27; } b.setAttribute(%27onMouseOver%27,%27this.style.background=\%27rgba(0,0,0,0.25)\%27%27); b.setAttribute(%27onMouseOut%27,%27this.style.background=\%27transparent\%27%27); b.setAttribute(%27onClick%27,%27pick(this)%27); }
